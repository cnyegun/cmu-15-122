void doubling(int[] A, int[] B, int n)
//@requires 0 <= n && n <= (int_max() / 2);
//@requires \length(A) == n && \length(B) == 2*n;
{
    for (int i = 0; i < n; i++)
    //@loop_invariant 0 <= i && i <= n;
    {
        B[2*i] = A[i];
        B[2*i + 1] = A[i];
    }
}

/*

1. It will always satisfies because if it overflown it will still satisfies. 
2. assume: \length(B) = 2*n
   to show: 0 <= 2*i + 1 < 2*n
A. 0 <= i < n by line 5
B. 0 <= 2*i + 1 by math on A (no overflow by line 2)
D. i <= n - 1 by math on A
   2*i <= 2(n - 1) 
   2*i <= 2n - 2
   2*i + 1 <= 2n - 1
   2*i + 1 < 2n (integers) 

*/
