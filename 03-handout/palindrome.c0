// Helper function for converting an int to an array of its digits
int[] to_arr(int num)
//@requires num >= 0;
//@ensures \length(\result) > 0;
{
  int tmp = num;
  int n = 0;
  if (tmp == 0) {
    n = 1;
  }
  else {
    while(tmp != 0)
    //@loop_invariant tmp >= 0;
    {
      tmp = tmp / 10;
      n++;
    }
  }

  int[] A = alloc_array(int, n);
  for(int i=0; i<n; i++)
  //@loop_invariant i >= 0 && i <= n;
  //@loop_invariant num >= 0;
  {
    A[i] = num % 10;
    num /= 10;
  }
  //@assert num == 0;
  return A;
}

// Functions from (1.a)
bool is_reversed(int[] first, int[] last, int i, int n)
//@requires 0 <= n && n == \length(first) && n == \length(last);
//@requires 0 <= i && i <= n;
{
  for(int j = 0; j < i; j++) {
    if (first[j] != last[n - j - 1]) {
      return false;
    }
  }
  return true;
}

int[] reverse(int[] A, int n)
//@requires n == \length(A);
//@ensures is_reversed(A, \result, n, n);
{
    int[] B = alloc_array(int, n);
    for(int i = 0; i < n; i++)
    //loop invariants from (1.a) would go here
    {
        B[n - i - 1] = A[i];
    }
    return B;
}


bool is_palindrome_old(int[] A, int i, int j)
//@requires 0 <= i && i <= j && j <= \length(A);
{
  int[] B = alloc_array(int, j - i);
  for(int k = i; k < j; k++)
  {
    B[k - i] = A[k];
  }

  int[] C = reverse(B, j - i);
  for(int k = 0; k < j - i; k++) {
    if (B[k] != C[k]) {
      return false;
    }
  }

  return true;
}

bool is_palindrome(int[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@ensures \result == is_palindrome_old(A, 0, n);
{
  int is_odd = n % 2 == 0 ? 0 : 1;
  for (int i = 0; i < n/2; i++)
  //@loop_invariant 0 <= i && i <= n/2;
  //@loop_invariant is_palindrome_old(A, n/2 - i, n/2 + i + is_odd);
  {
    if (n % 2 != 0) {
      if (A[n/2 - i - 1] != A[n/2 + i + 1]) return false;
    } else {
      //@assert n % 2 == 0;
      if (A[n/2 + i] != A[n/2 - i - 1]) return false;
    }
  }
	return true;
}

