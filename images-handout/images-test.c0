/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2023                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
#use <conio>
#use <img>



int main() {

  // Create a few small images manually -- here's an example
  pixel_t[] A = alloc_array(pixel_t, 4); // A is a 2x2 image
  int width_A  = 2;
  int height_A = 2;
  A[0] = make_pixel(255, 255, 0, 0);     // A[0] is a red pixel
  A[1] = make_pixel(255, 0, 255, 0);     // A[1] is a green pixel
  A[2] = make_pixel(255, 0, 0, 255);     // A[2] is a blue pixel
  A[3] = make_pixel(255, 255, 255, 0);   // A[3] is a yellow pixel
  printf("Here's what the image looks like:\n");
  image_print(A, width_A, height_A);

  // Load some large images -- here's an example
  image_t g5 = image_load("img/g5.png");
  if (g5 == NULL) error("Could not load source image");
  int width = image_width(g5);
  int height = image_height(g5);
  pixel_t[] inpixels = image_data(g5);
  //@assert \length(inpixels) == width * height;
  printf("Loaded image.  Dimensions are %d by %d.\n", width, height);


  // Test the functions you implemented in imageutil.c0
  //   on small and large images

  int w = width_A;
  int h = height_A;

  // get_row / get_column
  assert(get_row(0, w, h) == 0);
  assert(get_column(0, w, h) == 0);

  assert(get_row(1, w, h) == 0);
  assert(get_column(1, w, h) == 1);

  assert(get_row(2, w, h) == 1);
  assert(get_column(2, w, h) == 0);

  assert(get_row(3, w, h) == 1);
  assert(get_column(3, w, h) == 1);

  // is_valid_pixel
  assert(is_valid_pixel(0, 0, w, h));
  assert(is_valid_pixel(0, 1, w, h));
  assert(is_valid_pixel(1, 0, w, h));
  assert(is_valid_pixel(1, 1, w, h));

  assert(!is_valid_pixel(-1, 0, w, h));
  assert(!is_valid_pixel(0, -1, w, h));
  assert(!is_valid_pixel(2, 0, w, h));
  assert(!is_valid_pixel(0, 2, w, h));

  // get_index
  assert(get_index(0, 0, w, h) == 0);
  assert(get_index(0, 1, w, h) == 1);
  assert(get_index(1, 0, w, h) == 2);
  assert(get_index(1, 1, w, h) == 3);

  // round-trip
  for (int i = 0; i < w * h; i++) {
    int r = get_row(i, w, h);
    int c = get_column(i, w, h);
    assert(get_index(r, c, w, h) == i);
  }

  // --- Synthetic 3x4 image ---
  w = 3; h = 4;

  assert(get_index(0, 0, w, h) == 0);
  assert(get_index(0, 2, w, h) == 2);
  assert(get_index(1, 0, w, h) == 3);
  assert(get_index(3, 2, w, h) == 11);

  for (int i = 0; i < w * h; i++) {
    int r = get_row(i, w, h);
    int c = get_column(i, w, h);
    assert(is_valid_pixel(r, c, w, h));
    assert(get_index(r, c, w, h) == i);
  }

  assert(!is_valid_pixel(-1, 1, w, h));
  assert(!is_valid_pixel(1, -1, w, h));
  assert(!is_valid_pixel(4, 0, w, h));
  assert(!is_valid_pixel(0, 3, w, h));

  printf("[imageutil] All tests passed!\n\n");

  // Test hide and unhide on your small images



  // Test crop on your small images



  // Test upsize on your small images



  printf("All tests passed!\n");
  return 0;
}
