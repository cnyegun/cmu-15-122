/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2023                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
#use <conio>
#use <img>



int main() {

  // Create a few small images manually -- here's an example
  pixel_t[] A = alloc_array(pixel_t, 4); // A is a 2x2 image
  int width_A  = 2;
  int height_A = 2;
  A[0] = make_pixel(255, 255, 0, 0);     // A[0] is a red pixel
  A[1] = make_pixel(255, 0, 255, 0);     // A[1] is a green pixel
  A[2] = make_pixel(255, 0, 0, 255);     // A[2] is a blue pixel
  A[3] = make_pixel(255, 255, 255, 0);   // A[3] is a yellow pixel
  printf("Here's what the image looks like:\n");
  image_print(A, width_A, height_A);

  // Load some large images -- here's an example
  image_t g5 = image_load("img/g5.png");
  if (g5 == NULL) error("Could not load source image");
  int width = image_width(g5);
  int height = image_height(g5);
  pixel_t[] inpixels = image_data(g5);
  //@assert \length(inpixels) == width * height;
  printf("Loaded image.  Dimensions are %d by %d.\n", width, height);


  // write your own test here
    // Test stretch_horizontally on 2x2 image A with k = 1
  int k = 1;
  pixel_t[] result = stretch_horizontally(A, width_A, height_A, k);
  int new_width = (k + 1) * width_A - k;  // = 3
  int new_height = height_A;             // = 2

  //@assert \length(result) == new_width * new_height;

  printf("Stretched image (horizontally, k=1):\n");
  image_print(result, new_width, new_height);

  // Row 0
  pixel_t p00 = result[0]; // A[0] = red
  pixel_t p01 = result[1]; // interpolated between A[0] (red) and A[1] (green)
  pixel_t p02 = result[2]; // A[1] = green

  // Row 1
  pixel_t p10 = result[3]; // A[2] = blue
  pixel_t p11 = result[4]; // interpolated between A[2] (blue) and A[3] (yellow)
  pixel_t p12 = result[5]; // A[3] = yellow

  // Assert exact values
  assert(get_red(p00) == 255 && get_green(p00) == 0   && get_blue(p00) == 0);     // Red
  assert(get_red(p02) == 0   && get_green(p02) == 255 && get_blue(p02) == 0);     // Green
  assert(get_red(p10) == 0   && get_green(p10) == 0   && get_blue(p10) == 255);   // Blue
  assert(get_red(p12) == 255 && get_green(p12) == 255 && get_blue(p12) == 0);     // Yellow

  // Interpolation between red and green: expect ~50% blend
  assert(get_red(p01) == 127 || get_red(p01) == 128);
  assert(get_green(p01) == 127 || get_green(p01) == 128);
  assert(get_blue(p01) == 0);

  // Interpolation between blue and yellow: expect ~50% blend
  assert(get_red(p11) == 127 || get_red(p11) == 128);
  assert(get_green(p11) == 127 || get_green(p11) == 128);
  assert(get_blue(p11) == 127 || get_blue(p11) == 128);



  printf("All tests passed!\n");
  return 0;
}
